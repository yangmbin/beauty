package com.beauty.application;

import java.io.File;
import java.util.LinkedList;
import java.util.Map;

import android.app.Application;
import android.content.Context;

import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiscCache;
import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.cache.memory.impl.UsingFreqLimitedMemoryCache;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.nostra13.universalimageloader.core.download.BaseImageDownloader;
import com.nostra13.universalimageloader.utils.StorageUtils;

public class MyApplication extends Application {
	

	public static LinkedList<Map<String, Object>> listItems = new LinkedList<Map<String, Object>>(); //表示主页条目，全局保存

	@Override
    public void onCreate() {
		super.onCreate();
		initImageLoader(getApplicationContext());
	}

	public static void initImageLoader(Context context) {
		//缓存文件的目录
	    File cacheDir = StorageUtils.getOwnCacheDirectory(context, "Beauty_universalimageloader/Cache"); 
	    ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)
	        .memoryCacheExtraOptions(480, 800) // max width, max height，即保存的每个缓存文件的最大长宽 
	        .threadPoolSize(3) //线程池内线程的数量
	        .threadPriority(Thread.NORM_PRIORITY - 2)
	        .denyCacheImageMultipleSizesInMemory()
	        .diskCacheFileNameGenerator(new Md5FileNameGenerator()) //将保存的时候的URI名称用MD5 加密
	        .memoryCache(new UsingFreqLimitedMemoryCache(2 * 1024 * 1024))
	        .memoryCacheSize(2 * 1024 * 1024) // 内存缓存的最大值
	        .diskCacheSize(50 * 1024 * 1024)  // SD卡缓存的最大值
	        .tasksProcessingOrder(QueueProcessingType.LIFO)
	        // 由原先的discCache -> diskCache
	        .diskCache(new UnlimitedDiscCache(cacheDir))//自定义缓存路径  
	        .imageDownloader(new BaseImageDownloader(context, 5 * 1000, 30 * 1000)) // connectTimeout (5 s), readTimeout (30 s)超时时间  
	        .writeDebugLogs() // Remove for release app
	        .build();
	    //全局初始化此配置  
	    ImageLoader.getInstance().init(config);
	}
}
